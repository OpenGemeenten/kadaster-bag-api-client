<?php
/**
 * Standplaats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kadaster\BagApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IMBAG API - van de LVBAG
 *
 * Dit is de [BAG API](https://zakelijk.kadaster.nl/-/bag-api) Individuele Bevragingen van de Landelijke Voorziening Basisregistratie Adressen en Gebouwen (LVBAG).  Meer informatie over de Basisregistratie Adressen en Gebouwen is te vinden op de website van het [Ministerie van Binnenlandse Zaken en Koninkrijksrelaties](https://www.geobasisregistraties.nl/basisregistraties/adressen-en-gebouwen) en [Kadaster](https://zakelijk.kadaster.nl/bag).  De BAG API levert informatie conform de [BAG Catalogus 2018](https://www.geobasisregistraties.nl/documenten/publicatie/2018/03/12/catalogus-2018) en het informatiemodel IMBAG 2.0. De API specificatie volgt de [Nederlandse API-Strategie](https://docs.geostandaarden.nl/api/API-Strategie) specificatie versie van 20200204 en is opgesteld in [OpenAPI Specificatie](https://www.forumstandaardisatie.nl/standaard/openapi-specification) (OAS) v3.  Het standaard mediatype HAL (`application/hal+json`) wordt gebruikt. Dit is een mediatype voor het weergeven van resources en hun relaties via hyperlinks.  Deze API is vooral gericht op individuele bevragingen (op basis van de identificerende gegevens van een object). Om gebruik te kunnen maken van de BAG API is een API key nodig, deze kan verkregen worden door het [aanvraagformulier](https://formulieren.kadaster.nl/aanvraag_bag_api_individuele_bevragingen_productie) in te vullen.  Voor vragen, neem contact op met de LVBAG beheerder o.v.v. BAG API 2.0. We zijn aan het kijken naar een geschikt medium hiervoor, mede ook om de API iteratief te kunnen opstellen of doorontwikkelen samen met de community. Als de API iets (nog) niet kan, wat u wel graag wilt, neem dan contact op.
 *
 * OpenAPI spec version: 2.9.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kadaster\BagApiClient\Model;
use \Kadaster\BagApiClient\ObjectSerializer;

/**
 * Standplaats Class Doc Comment
 *
 * @category Class
 * @description Een Standplaats is een door het bevoegde gemeentelijke orgaan als zodanig aangewezen terrein of gedeelte daarvan dat bestemd is voor het permanent plaatsen van een niet direct en niet duurzaam met de aarde verbonden en voor woon-, bedrijfsmatige, of recreatieve doeleinden geschikte ruimte.  **heeftAlsHoofdAdres**: Een adresseerbaar object heeft als hoofadres een  nummeraanduiding.  Deze property bevat de identificatie van de nummeraanduiding die het  hoofdadres is van het adresseerbare object.  **status**: De fase van de levenscyclus van een standplaats, waarin  de betreffende standplaats zich bevindt.  **geometrie**: De tweedimensionale geometrische representatie van de  omtrekken van een standplaats.  **geconstateerd**: Een aanduiding waarmee kan worden aangegeven dat een  object in de registratie is opgenomen als gevolg van een feitelijke  constatering, zonder dat er op het moment van opname sprake was van een  regulier brondocument voor deze opname.  **voorkomen**: De toestand van een object in de administratieve  werkelijkheid, zoals beschreven met de eigenschappen van dit object  waarover gegevens geregistreerd worden, waarbij de gegevens gedurende een  bepaalde periode gelijk zijn in de (basis) registratie.
 * @package  Kadaster\BagApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Standplaats extends AdresseerbaarObject
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Standplaats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'identificatie' => '\Kadaster\BagApiClient\Model\StandplaatsIdentificatie',
        'domein' => 'string',
        'status' => '\Kadaster\BagApiClient\Model\StatusPlaats',
        'geometrie' => '\Kadaster\BagApiClient\Model\Surface',
        'geconstateerd' => '\Kadaster\BagApiClient\Model\Indicatie',
        'documentdatum' => '\DateTime',
        'documentnummer' => 'string',
        'voorkomen' => '\Kadaster\BagApiClient\Model\VoorkomenLV'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'identificatie' => null,
        'domein' => null,
        'status' => null,
        'geometrie' => null,
        'geconstateerd' => null,
        'documentdatum' => 'date',
        'documentnummer' => null,
        'voorkomen' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identificatie' => 'identificatie',
        'domein' => 'domein',
        'status' => 'status',
        'geometrie' => 'geometrie',
        'geconstateerd' => 'geconstateerd',
        'documentdatum' => 'documentdatum',
        'documentnummer' => 'documentnummer',
        'voorkomen' => 'voorkomen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identificatie' => 'setIdentificatie',
        'domein' => 'setDomein',
        'status' => 'setStatus',
        'geometrie' => 'setGeometrie',
        'geconstateerd' => 'setGeconstateerd',
        'documentdatum' => 'setDocumentdatum',
        'documentnummer' => 'setDocumentnummer',
        'voorkomen' => 'setVoorkomen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identificatie' => 'getIdentificatie',
        'domein' => 'getDomein',
        'status' => 'getStatus',
        'geometrie' => 'getGeometrie',
        'geconstateerd' => 'getGeconstateerd',
        'documentdatum' => 'getDocumentdatum',
        'documentnummer' => 'getDocumentnummer',
        'voorkomen' => 'getVoorkomen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['identificatie'] = isset($data['identificatie']) ? $data['identificatie'] : null;
        $this->container['domein'] = isset($data['domein']) ? $data['domein'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['geometrie'] = isset($data['geometrie']) ? $data['geometrie'] : null;
        $this->container['geconstateerd'] = isset($data['geconstateerd']) ? $data['geconstateerd'] : null;
        $this->container['documentdatum'] = isset($data['documentdatum']) ? $data['documentdatum'] : null;
        $this->container['documentnummer'] = isset($data['documentnummer']) ? $data['documentnummer'] : null;
        $this->container['voorkomen'] = isset($data['voorkomen']) ? $data['voorkomen'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['identificatie'] === null) {
            $invalidProperties[] = "'identificatie' can't be null";
        }
        if ($this->container['domein'] === null) {
            $invalidProperties[] = "'domein' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['geometrie'] === null) {
            $invalidProperties[] = "'geometrie' can't be null";
        }
        if ($this->container['geconstateerd'] === null) {
            $invalidProperties[] = "'geconstateerd' can't be null";
        }
        if ($this->container['documentdatum'] === null) {
            $invalidProperties[] = "'documentdatum' can't be null";
        }
        if ($this->container['documentnummer'] === null) {
            $invalidProperties[] = "'documentnummer' can't be null";
        }
        if ($this->container['voorkomen'] === null) {
            $invalidProperties[] = "'voorkomen' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identificatie
     *
     * @return \Kadaster\BagApiClient\Model\StandplaatsIdentificatie
     */
    public function getIdentificatie()
    {
        return $this->container['identificatie'];
    }

    /**
     * Sets identificatie
     *
     * @param \Kadaster\BagApiClient\Model\StandplaatsIdentificatie $identificatie identificatie
     *
     * @return $this
     */
    public function setIdentificatie($identificatie)
    {
        $this->container['identificatie'] = $identificatie;

        return $this;
    }

    /**
     * Gets domein
     *
     * @return string
     */
    public function getDomein()
    {
        return $this->container['domein'];
    }

    /**
     * Sets domein
     *
     * @param string $domein NL.IMBAG.Standplaats
     *
     * @return $this
     */
    public function setDomein($domein)
    {
        $this->container['domein'] = $domein;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Kadaster\BagApiClient\Model\StatusPlaats
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Kadaster\BagApiClient\Model\StatusPlaats $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets geometrie
     *
     * @return \Kadaster\BagApiClient\Model\Surface
     */
    public function getGeometrie()
    {
        return $this->container['geometrie'];
    }

    /**
     * Sets geometrie
     *
     * @param \Kadaster\BagApiClient\Model\Surface $geometrie geometrie
     *
     * @return $this
     */
    public function setGeometrie($geometrie)
    {
        $this->container['geometrie'] = $geometrie;

        return $this;
    }

    /**
     * Gets geconstateerd
     *
     * @return \Kadaster\BagApiClient\Model\Indicatie
     */
    public function getGeconstateerd()
    {
        return $this->container['geconstateerd'];
    }

    /**
     * Sets geconstateerd
     *
     * @param \Kadaster\BagApiClient\Model\Indicatie $geconstateerd geconstateerd
     *
     * @return $this
     */
    public function setGeconstateerd($geconstateerd)
    {
        $this->container['geconstateerd'] = $geconstateerd;

        return $this;
    }

    /**
     * Gets documentdatum
     *
     * @return \DateTime
     */
    public function getDocumentdatum()
    {
        return $this->container['documentdatum'];
    }

    /**
     * Sets documentdatum
     *
     * @param \DateTime $documentdatum De datum waarop het brondocument is vastgesteld, op basis waarvan een opname,  mutatie of een verwijdering van gegevens ten aanzien van een object heeft  plaatsgevonden.
     *
     * @return $this
     */
    public function setDocumentdatum($documentdatum)
    {
        $this->container['documentdatum'] = $documentdatum;

        return $this;
    }

    /**
     * Gets documentnummer
     *
     * @return string
     */
    public function getDocumentnummer()
    {
        return $this->container['documentnummer'];
    }

    /**
     * Sets documentnummer
     *
     * @param string $documentnummer De unieke aanduiding van het brondocument op basis waarvan een opname,  mutatie of een verwijdering van gegevens ten aanzien van een woonplaats  heeft plaatsgevonden, binnen een gemeente.  Alle karakters uit de MES-1 karakterset zijn toegestaan.
     *
     * @return $this
     */
    public function setDocumentnummer($documentnummer)
    {
        $this->container['documentnummer'] = $documentnummer;

        return $this;
    }

    /**
     * Gets voorkomen
     *
     * @return \Kadaster\BagApiClient\Model\VoorkomenLV
     */
    public function getVoorkomen()
    {
        return $this->container['voorkomen'];
    }

    /**
     * Sets voorkomen
     *
     * @param \Kadaster\BagApiClient\Model\VoorkomenLV $voorkomen voorkomen
     *
     * @return $this
     */
    public function setVoorkomen($voorkomen)
    {
        $this->container['voorkomen'] = $voorkomen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
