<?php
/**
 * AdresApi
 * PHP version 5
 *
 * @category Class
 * @package  Kadaster\BagApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IMBAG API - van de LVBAG
 *
 * Dit is de [BAG API](https://zakelijk.kadaster.nl/-/bag-api) Individuele Bevragingen van de Landelijke Voorziening Basisregistratie Adressen en Gebouwen (LVBAG).  Meer informatie over de Basisregistratie Adressen en Gebouwen is te vinden op de website van het [Ministerie van Binnenlandse Zaken en Koninkrijksrelaties](https://www.geobasisregistraties.nl/basisregistraties/adressen-en-gebouwen) en [Kadaster](https://zakelijk.kadaster.nl/bag).  De BAG API levert informatie conform de [BAG Catalogus 2018](https://www.geobasisregistraties.nl/documenten/publicatie/2018/03/12/catalogus-2018) en het informatiemodel IMBAG 2.0. De API specificatie volgt de [Nederlandse API-Strategie](https://docs.geostandaarden.nl/api/API-Strategie) specificatie versie van 20200204 en is opgesteld in [OpenAPI Specificatie](https://www.forumstandaardisatie.nl/standaard/openapi-specification) (OAS) v3.  Het standaard mediatype HAL (`application/hal+json`) wordt gebruikt. Dit is een mediatype voor het weergeven van resources en hun relaties via hyperlinks.  Deze API is vooral gericht op individuele bevragingen (op basis van de identificerende gegevens van een object). Om gebruik te kunnen maken van de BAG API is een API key nodig, deze kan verkregen worden door het [aanvraagformulier](https://formulieren.kadaster.nl/aanvraag_bag_api_individuele_bevragingen_productie) in te vullen.  Voor vragen, neem contact op met de LVBAG beheerder o.v.v. BAG API 2.0. We zijn aan het kijken naar een geschikt medium hiervoor, mede ook om de API iteratief te kunnen opstellen of doorontwikkelen samen met de community. Als de API iets (nog) niet kan, wat u wel graag wilt, neem dan contact op.
 *
 * OpenAPI spec version: 2.9.2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kadaster\BagApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Kadaster\BagApiClient\ApiException;
use Kadaster\BagApiClient\Configuration;
use Kadaster\BagApiClient\HeaderSelector;
use Kadaster\BagApiClient\ObjectSerializer;

/**
 * AdresApi Class Doc Comment
 *
 * @category Class
 * @package  Kadaster\BagApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdresApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bevraagAdressen
     *
     * Bevragen van huidige adressen met een (combinatie van) zoek parameters.
     *
     * @param  string $zoekresultaat_identificatie De identificatie van een gekozen zoekresultaat uit de  zoekResultatenHalCollectie verkregen bij een GET /adressen/zoek. (optional)
     * @param  string $postcode Postcode behorende bij een nummeraanduiding. (optional)
     * @param  int $huisnummer Huisnummer behorende bij een nummeraanduiding. (optional)
     * @param  string $huisnummertoevoeging Huisnummertoevoeging behorende bij een nummeraanduiding. (optional)
     * @param  string $huisletter Huisletter behorende bij een nummeraanduiding. (optional)
     * @param  bool $exacte_match Een indicatie of de resultaten van een zoekoperatie exact overeen  moeten komen met de zoekcriteria, zie  [functionele specificatie exacte match](https://github.com/lvbag/BAG-API/blob/master/Features/exacte_match.feature). (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\AdresseerbaarObjectIdentificatie $adresseerbaar_object_identificatie Identificatie van een adresseerbaar object uit de BAG. (optional)
     * @param  string $woonplaats_naam Naam van een woonplaats. (optional)
     * @param  string $openbare_ruimte_naam Naam van een openbare ruimte. (optional)
     * @param  \Kadaster\BagApiClient\Model\PandIdentificatie $pand_identificatie De identificatie van een pand uit de BAG. (optional)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     * @param  string $q Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\OpenbareRuimteIdentificatie $openbare_ruimte_identificatie De identificatie van een openbare ruimte uit de BAG. (optional)
     *
     * @throws \Kadaster\BagApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kadaster\BagApiClient\Model\AdresIOHalCollection
     */
    public function bevraagAdressen($zoekresultaat_identificatie = null, $postcode = null, $huisnummer = null, $huisnummertoevoeging = null, $huisletter = null, $exacte_match = 'false', $adresseerbaar_object_identificatie = null, $woonplaats_naam = null, $openbare_ruimte_naam = null, $pand_identificatie = null, $expand = null, $page = '1', $page_size = '20', $q = null, $inclusief_eind_status = 'false', $openbare_ruimte_identificatie = null)
    {
        list($response) = $this->bevraagAdressenWithHttpInfo($zoekresultaat_identificatie, $postcode, $huisnummer, $huisnummertoevoeging, $huisletter, $exacte_match, $adresseerbaar_object_identificatie, $woonplaats_naam, $openbare_ruimte_naam, $pand_identificatie, $expand, $page, $page_size, $q, $inclusief_eind_status, $openbare_ruimte_identificatie);
        return $response;
    }

    /**
     * Operation bevraagAdressenWithHttpInfo
     *
     * Bevragen van huidige adressen met een (combinatie van) zoek parameters.
     *
     * @param  string $zoekresultaat_identificatie De identificatie van een gekozen zoekresultaat uit de  zoekResultatenHalCollectie verkregen bij een GET /adressen/zoek. (optional)
     * @param  string $postcode Postcode behorende bij een nummeraanduiding. (optional)
     * @param  int $huisnummer Huisnummer behorende bij een nummeraanduiding. (optional)
     * @param  string $huisnummertoevoeging Huisnummertoevoeging behorende bij een nummeraanduiding. (optional)
     * @param  string $huisletter Huisletter behorende bij een nummeraanduiding. (optional)
     * @param  bool $exacte_match Een indicatie of de resultaten van een zoekoperatie exact overeen  moeten komen met de zoekcriteria, zie  [functionele specificatie exacte match](https://github.com/lvbag/BAG-API/blob/master/Features/exacte_match.feature). (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\AdresseerbaarObjectIdentificatie $adresseerbaar_object_identificatie Identificatie van een adresseerbaar object uit de BAG. (optional)
     * @param  string $woonplaats_naam Naam van een woonplaats. (optional)
     * @param  string $openbare_ruimte_naam Naam van een openbare ruimte. (optional)
     * @param  \Kadaster\BagApiClient\Model\PandIdentificatie $pand_identificatie De identificatie van een pand uit de BAG. (optional)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     * @param  string $q Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\OpenbareRuimteIdentificatie $openbare_ruimte_identificatie De identificatie van een openbare ruimte uit de BAG. (optional)
     *
     * @throws \Kadaster\BagApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kadaster\BagApiClient\Model\AdresIOHalCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function bevraagAdressenWithHttpInfo($zoekresultaat_identificatie = null, $postcode = null, $huisnummer = null, $huisnummertoevoeging = null, $huisletter = null, $exacte_match = 'false', $adresseerbaar_object_identificatie = null, $woonplaats_naam = null, $openbare_ruimte_naam = null, $pand_identificatie = null, $expand = null, $page = '1', $page_size = '20', $q = null, $inclusief_eind_status = 'false', $openbare_ruimte_identificatie = null)
    {
        $returnType = '\Kadaster\BagApiClient\Model\AdresIOHalCollection';
        $request = $this->bevraagAdressenRequest($zoekresultaat_identificatie, $postcode, $huisnummer, $huisnummertoevoeging, $huisletter, $exacte_match, $adresseerbaar_object_identificatie, $woonplaats_naam, $openbare_ruimte_naam, $pand_identificatie, $expand, $page, $page_size, $q, $inclusief_eind_status, $openbare_ruimte_identificatie);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\AdresIOHalCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\ExtendedProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bevraagAdressenAsync
     *
     * Bevragen van huidige adressen met een (combinatie van) zoek parameters.
     *
     * @param  string $zoekresultaat_identificatie De identificatie van een gekozen zoekresultaat uit de  zoekResultatenHalCollectie verkregen bij een GET /adressen/zoek. (optional)
     * @param  string $postcode Postcode behorende bij een nummeraanduiding. (optional)
     * @param  int $huisnummer Huisnummer behorende bij een nummeraanduiding. (optional)
     * @param  string $huisnummertoevoeging Huisnummertoevoeging behorende bij een nummeraanduiding. (optional)
     * @param  string $huisletter Huisletter behorende bij een nummeraanduiding. (optional)
     * @param  bool $exacte_match Een indicatie of de resultaten van een zoekoperatie exact overeen  moeten komen met de zoekcriteria, zie  [functionele specificatie exacte match](https://github.com/lvbag/BAG-API/blob/master/Features/exacte_match.feature). (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\AdresseerbaarObjectIdentificatie $adresseerbaar_object_identificatie Identificatie van een adresseerbaar object uit de BAG. (optional)
     * @param  string $woonplaats_naam Naam van een woonplaats. (optional)
     * @param  string $openbare_ruimte_naam Naam van een openbare ruimte. (optional)
     * @param  \Kadaster\BagApiClient\Model\PandIdentificatie $pand_identificatie De identificatie van een pand uit de BAG. (optional)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     * @param  string $q Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\OpenbareRuimteIdentificatie $openbare_ruimte_identificatie De identificatie van een openbare ruimte uit de BAG. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bevraagAdressenAsync($zoekresultaat_identificatie = null, $postcode = null, $huisnummer = null, $huisnummertoevoeging = null, $huisletter = null, $exacte_match = 'false', $adresseerbaar_object_identificatie = null, $woonplaats_naam = null, $openbare_ruimte_naam = null, $pand_identificatie = null, $expand = null, $page = '1', $page_size = '20', $q = null, $inclusief_eind_status = 'false', $openbare_ruimte_identificatie = null)
    {
        return $this->bevraagAdressenAsyncWithHttpInfo($zoekresultaat_identificatie, $postcode, $huisnummer, $huisnummertoevoeging, $huisletter, $exacte_match, $adresseerbaar_object_identificatie, $woonplaats_naam, $openbare_ruimte_naam, $pand_identificatie, $expand, $page, $page_size, $q, $inclusief_eind_status, $openbare_ruimte_identificatie)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bevraagAdressenAsyncWithHttpInfo
     *
     * Bevragen van huidige adressen met een (combinatie van) zoek parameters.
     *
     * @param  string $zoekresultaat_identificatie De identificatie van een gekozen zoekresultaat uit de  zoekResultatenHalCollectie verkregen bij een GET /adressen/zoek. (optional)
     * @param  string $postcode Postcode behorende bij een nummeraanduiding. (optional)
     * @param  int $huisnummer Huisnummer behorende bij een nummeraanduiding. (optional)
     * @param  string $huisnummertoevoeging Huisnummertoevoeging behorende bij een nummeraanduiding. (optional)
     * @param  string $huisletter Huisletter behorende bij een nummeraanduiding. (optional)
     * @param  bool $exacte_match Een indicatie of de resultaten van een zoekoperatie exact overeen  moeten komen met de zoekcriteria, zie  [functionele specificatie exacte match](https://github.com/lvbag/BAG-API/blob/master/Features/exacte_match.feature). (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\AdresseerbaarObjectIdentificatie $adresseerbaar_object_identificatie Identificatie van een adresseerbaar object uit de BAG. (optional)
     * @param  string $woonplaats_naam Naam van een woonplaats. (optional)
     * @param  string $openbare_ruimte_naam Naam van een openbare ruimte. (optional)
     * @param  \Kadaster\BagApiClient\Model\PandIdentificatie $pand_identificatie De identificatie van een pand uit de BAG. (optional)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     * @param  string $q Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\OpenbareRuimteIdentificatie $openbare_ruimte_identificatie De identificatie van een openbare ruimte uit de BAG. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bevraagAdressenAsyncWithHttpInfo($zoekresultaat_identificatie = null, $postcode = null, $huisnummer = null, $huisnummertoevoeging = null, $huisletter = null, $exacte_match = 'false', $adresseerbaar_object_identificatie = null, $woonplaats_naam = null, $openbare_ruimte_naam = null, $pand_identificatie = null, $expand = null, $page = '1', $page_size = '20', $q = null, $inclusief_eind_status = 'false', $openbare_ruimte_identificatie = null)
    {
        $returnType = '\Kadaster\BagApiClient\Model\AdresIOHalCollection';
        $request = $this->bevraagAdressenRequest($zoekresultaat_identificatie, $postcode, $huisnummer, $huisnummertoevoeging, $huisletter, $exacte_match, $adresseerbaar_object_identificatie, $woonplaats_naam, $openbare_ruimte_naam, $pand_identificatie, $expand, $page, $page_size, $q, $inclusief_eind_status, $openbare_ruimte_identificatie);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bevraagAdressen'
     *
     * @param  string $zoekresultaat_identificatie De identificatie van een gekozen zoekresultaat uit de  zoekResultatenHalCollectie verkregen bij een GET /adressen/zoek. (optional)
     * @param  string $postcode Postcode behorende bij een nummeraanduiding. (optional)
     * @param  int $huisnummer Huisnummer behorende bij een nummeraanduiding. (optional)
     * @param  string $huisnummertoevoeging Huisnummertoevoeging behorende bij een nummeraanduiding. (optional)
     * @param  string $huisletter Huisletter behorende bij een nummeraanduiding. (optional)
     * @param  bool $exacte_match Een indicatie of de resultaten van een zoekoperatie exact overeen  moeten komen met de zoekcriteria, zie  [functionele specificatie exacte match](https://github.com/lvbag/BAG-API/blob/master/Features/exacte_match.feature). (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\AdresseerbaarObjectIdentificatie $adresseerbaar_object_identificatie Identificatie van een adresseerbaar object uit de BAG. (optional)
     * @param  string $woonplaats_naam Naam van een woonplaats. (optional)
     * @param  string $openbare_ruimte_naam Naam van een openbare ruimte. (optional)
     * @param  \Kadaster\BagApiClient\Model\PandIdentificatie $pand_identificatie De identificatie van een pand uit de BAG. (optional)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     * @param  string $q Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     * @param  \Kadaster\BagApiClient\Model\OpenbareRuimteIdentificatie $openbare_ruimte_identificatie De identificatie van een openbare ruimte uit de BAG. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bevraagAdressenRequest($zoekresultaat_identificatie = null, $postcode = null, $huisnummer = null, $huisnummertoevoeging = null, $huisletter = null, $exacte_match = 'false', $adresseerbaar_object_identificatie = null, $woonplaats_naam = null, $openbare_ruimte_naam = null, $pand_identificatie = null, $expand = null, $page = '1', $page_size = '20', $q = null, $inclusief_eind_status = 'false', $openbare_ruimte_identificatie = null)
    {

        $resourcePath = '/adressen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($zoekresultaat_identificatie !== null) {
            $queryParams['zoekresultaatIdentificatie'] = ObjectSerializer::toQueryValue($zoekresultaat_identificatie, null);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = ObjectSerializer::toQueryValue($postcode, null);
        }
        // query params
        if ($huisnummer !== null) {
            $queryParams['huisnummer'] = ObjectSerializer::toQueryValue($huisnummer, null);
        }
        // query params
        if ($huisnummertoevoeging !== null) {
            $queryParams['huisnummertoevoeging'] = ObjectSerializer::toQueryValue($huisnummertoevoeging, null);
        }
        // query params
        if ($huisletter !== null) {
            $queryParams['huisletter'] = ObjectSerializer::toQueryValue($huisletter, null);
        }
        // query params
        if ($exacte_match !== null) {
            $queryParams['exacteMatch'] = ObjectSerializer::toQueryValue($exacte_match, null);
        }
        // query params
        if ($adresseerbaar_object_identificatie !== null) {
            $queryParams['adresseerbaarObjectIdentificatie'] = ObjectSerializer::toQueryValue($adresseerbaar_object_identificatie, null);
        }
        // query params
        if ($woonplaats_naam !== null) {
            $queryParams['woonplaatsNaam'] = ObjectSerializer::toQueryValue($woonplaats_naam, null);
        }
        // query params
        if ($openbare_ruimte_naam !== null) {
            $queryParams['openbareRuimteNaam'] = ObjectSerializer::toQueryValue($openbare_ruimte_naam, null);
        }
        // query params
        if ($pand_identificatie !== null) {
            $queryParams['pandIdentificatie'] = ObjectSerializer::toQueryValue($pand_identificatie, null);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if ($inclusief_eind_status !== null) {
            $queryParams['inclusiefEindStatus'] = ObjectSerializer::toQueryValue($inclusief_eind_status, null);
        }
        // query params
        if ($openbare_ruimte_identificatie !== null) {
            $queryParams['openbareRuimteIdentificatie'] = ObjectSerializer::toQueryValue($openbare_ruimte_identificatie, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/hal+json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/hal+json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bevraagAdressenMetNumId
     *
     * Bevragen van een huidig adres met de identificatie van een nummeraanduiding.
     *
     * @param  \Kadaster\BagApiClient\Model\NummeraanduidingIdentificatie $nummeraanduiding_identificatie De identificatie van een nummeraanduiding uit de BAG. (required)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     *
     * @throws \Kadaster\BagApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kadaster\BagApiClient\Model\AdresIOHal
     */
    public function bevraagAdressenMetNumId($nummeraanduiding_identificatie, $expand = null, $inclusief_eind_status = 'false')
    {
        list($response) = $this->bevraagAdressenMetNumIdWithHttpInfo($nummeraanduiding_identificatie, $expand, $inclusief_eind_status);
        return $response;
    }

    /**
     * Operation bevraagAdressenMetNumIdWithHttpInfo
     *
     * Bevragen van een huidig adres met de identificatie van een nummeraanduiding.
     *
     * @param  \Kadaster\BagApiClient\Model\NummeraanduidingIdentificatie $nummeraanduiding_identificatie De identificatie van een nummeraanduiding uit de BAG. (required)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     *
     * @throws \Kadaster\BagApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kadaster\BagApiClient\Model\AdresIOHal, HTTP status code, HTTP response headers (array of strings)
     */
    public function bevraagAdressenMetNumIdWithHttpInfo($nummeraanduiding_identificatie, $expand = null, $inclusief_eind_status = 'false')
    {
        $returnType = '\Kadaster\BagApiClient\Model\AdresIOHal';
        $request = $this->bevraagAdressenMetNumIdRequest($nummeraanduiding_identificatie, $expand, $inclusief_eind_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\AdresIOHal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\ExtendedProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bevraagAdressenMetNumIdAsync
     *
     * Bevragen van een huidig adres met de identificatie van een nummeraanduiding.
     *
     * @param  \Kadaster\BagApiClient\Model\NummeraanduidingIdentificatie $nummeraanduiding_identificatie De identificatie van een nummeraanduiding uit de BAG. (required)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bevraagAdressenMetNumIdAsync($nummeraanduiding_identificatie, $expand = null, $inclusief_eind_status = 'false')
    {
        return $this->bevraagAdressenMetNumIdAsyncWithHttpInfo($nummeraanduiding_identificatie, $expand, $inclusief_eind_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bevraagAdressenMetNumIdAsyncWithHttpInfo
     *
     * Bevragen van een huidig adres met de identificatie van een nummeraanduiding.
     *
     * @param  \Kadaster\BagApiClient\Model\NummeraanduidingIdentificatie $nummeraanduiding_identificatie De identificatie van een nummeraanduiding uit de BAG. (required)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bevraagAdressenMetNumIdAsyncWithHttpInfo($nummeraanduiding_identificatie, $expand = null, $inclusief_eind_status = 'false')
    {
        $returnType = '\Kadaster\BagApiClient\Model\AdresIOHal';
        $request = $this->bevraagAdressenMetNumIdRequest($nummeraanduiding_identificatie, $expand, $inclusief_eind_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bevraagAdressenMetNumId'
     *
     * @param  \Kadaster\BagApiClient\Model\NummeraanduidingIdentificatie $nummeraanduiding_identificatie De identificatie van een nummeraanduiding uit de BAG. (required)
     * @param  string $expand Hier kan aangegeven worden welke gerelateerde resources meegeladen moeten worden. Resources en velden van resources die gewenst zijn kunnen in de expand parameter kommagescheiden worden opgegeven. Specifieke velden van resource kunnen worden opgegeven door het opgeven van de resource-naam gevolgd door de veldnaam, met daartussen een punt. (optional)
     * @param  bool $inclusief_eind_status Een indicatie of ook actuele voorkomens met een eind status geleverd moeten worden. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bevraagAdressenMetNumIdRequest($nummeraanduiding_identificatie, $expand = null, $inclusief_eind_status = 'false')
    {
        // verify the required parameter 'nummeraanduiding_identificatie' is set
        if ($nummeraanduiding_identificatie === null || (is_array($nummeraanduiding_identificatie) && count($nummeraanduiding_identificatie) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $nummeraanduiding_identificatie when calling bevraagAdressenMetNumId'
            );
        }

        $resourcePath = '/adressen/{nummeraanduidingIdentificatie}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand, null);
        }
        // query params
        if ($inclusief_eind_status !== null) {
            $queryParams['inclusiefEindStatus'] = ObjectSerializer::toQueryValue($inclusief_eind_status, null);
        }

        // path params
        if ($nummeraanduiding_identificatie !== null) {
            $resourcePath = str_replace(
                '{' . 'nummeraanduidingIdentificatie' . '}',
                ObjectSerializer::toPathValue($nummeraanduiding_identificatie),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/hal+json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/hal+json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation zoek
     *
     * Zoeken van huidige adressen
     *
     * @param  string $zoek Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (required)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     *
     * @throws \Kadaster\BagApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kadaster\BagApiClient\Model\ZoekResultaatHalCollection
     */
    public function zoek($zoek, $page = '1', $page_size = '20')
    {
        list($response) = $this->zoekWithHttpInfo($zoek, $page, $page_size);
        return $response;
    }

    /**
     * Operation zoekWithHttpInfo
     *
     * Zoeken van huidige adressen
     *
     * @param  string $zoek Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (required)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     *
     * @throws \Kadaster\BagApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kadaster\BagApiClient\Model\ZoekResultaatHalCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function zoekWithHttpInfo($zoek, $page = '1', $page_size = '20')
    {
        $returnType = '\Kadaster\BagApiClient\Model\ZoekResultaatHalCollection';
        $request = $this->zoekRequest($zoek, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\ZoekResultaatHalCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\ExtendedProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kadaster\BagApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zoekAsync
     *
     * Zoeken van huidige adressen
     *
     * @param  string $zoek Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (required)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zoekAsync($zoek, $page = '1', $page_size = '20')
    {
        return $this->zoekAsyncWithHttpInfo($zoek, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zoekAsyncWithHttpInfo
     *
     * Zoeken van huidige adressen
     *
     * @param  string $zoek Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (required)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zoekAsyncWithHttpInfo($zoek, $page = '1', $page_size = '20')
    {
        $returnType = '\Kadaster\BagApiClient\Model\ZoekResultaatHalCollection';
        $request = $this->zoekRequest($zoek, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'zoek'
     *
     * @param  string $zoek Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter,  huisnummertoevoeging. (required)
     * @param  int $page Pagina nummer (optional, default to 1)
     * @param  int $page_size Aantal resultaten per pagina (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function zoekRequest($zoek, $page = '1', $page_size = '20')
    {
        // verify the required parameter 'zoek' is set
        if ($zoek === null || (is_array($zoek) && count($zoek) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoek when calling zoek'
            );
        }

        $resourcePath = '/adressen/zoek';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($zoek !== null) {
            $queryParams['zoek'] = ObjectSerializer::toQueryValue($zoek, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/hal+json', 'application/problem+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/hal+json', 'application/problem+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
